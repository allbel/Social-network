{"version":3,"file":"static/js/557.c5794e4b.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__znlLW\",\"mainPhoto\":\"ProfileInfo_mainPhoto__pryhE\",\"contact\":\"ProfileInfo_contact__l3VQr\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [mode, setMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => setMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        setMode(false)\r\n        props.updateStatusProfile(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!mode &&\r\n                <div>\r\n                  <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n                </div>\r\n            }\r\n            {mode &&\r\n                <div>\r\n                  <b>Status:</b> <input\r\n                        autoFocus\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport css from './ProfileInfo.module.css';\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {error && <div className={'formSummaryError'}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>:\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'fullName'}\r\n                           placeholder={'Full name'}\r\n                           validate={[]}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'lookingForAJob'}\r\n                           placeholder={''}\r\n                           validate={[]}\r\n                           type={'checkbox'}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                <div>\r\n                    <Field component={Textarea}\r\n                           name={'lookingForAJobDescription'}\r\n                           placeholder={'My professional skills'}\r\n                           validate={[]}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                <div>\r\n                    <Field component={Textarea}\r\n                           name={'aboutMe'}\r\n                           placeholder={'About Me'}\r\n                           validate={[]}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={css.contact}>\r\n                    <b>{key}: </b>\r\n                    <div>\r\n                        <Field component={Input}\r\n                               name={'contacts.' + key}\r\n                               placeholder={key}\r\n                               validate={[]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport css from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\"\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatusProfile, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => setEditMode(false))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={css.descriptionBlock}>\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateStatusProfile={updateStatusProfile}/>\r\n                <img src={profile.photos?.large || userPhoto} className={css.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} /> }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype KeyContactsType = 'facebook' | 'website' | 'vk' | 'twitter' | 'instagram' | 'youtube' | 'github' | 'mainLink'\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: {profile: ProfileType; isOwner: boolean; goToEditMode: () => void}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            { profile.lookingForAJob &&\r\n              <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n              </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key}\r\n                                contactTitle={key}\r\n                                contactValue={profile.contacts[key as KeyContactsType]}\r\n                />\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: {contactTitle: string, contactValue: string | null}) => {\r\n    return <div className={css.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__AhxFh\",\"postsBlock\":\"MyPosts_postsBlock__LtpQN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__KwiPQ\"};","import React from 'react';\r\nimport css from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\ntype PostPropsType = PostType\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={css.item}>\r\n            <img src=\"https://cdn.fishki.net/upload/post/201505/08/1526580/0_8af37_3d6ed850_xxl.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like: {props.likeCounts}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport css from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} placeholder={'Enter your post'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n    let postsElements = props.posts.map(p =>\r\n        <Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likeCounts={p.likeCounts}/>)\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={css.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={css.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateProfilePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchProfilePropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateProfilePropsType & MapDispatchProfilePropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateProfilePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchProfilePropsType => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPostAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {ReactNode} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = ProfileContainerPropsType & {\r\n    children?: ReactNode\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatusProfile={props.updateStatusProfile}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatusProfile,\r\n    getUserProfile,\r\n    ProfileType,\r\n    savePhoto, saveProfile,\r\n    updateStatusProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {IdType} from \"../../redux/auth-reducer\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType>{\r\n\r\n    refreshProfile() {\r\n        let userId: string | IdType = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(String(userId))\r\n        this.props.getStatusProfile(String(userId))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     status={this.props.status}\r\n                     updateStatusProfile={this.props.updateStatusProfile}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\ntype MapStateProfileContainerPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchProfileContainerPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatusProfile: (userId: string) => void\r\n    updateStatusProfile: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerConnectPropsType =\r\n    MapStateProfileContainerPropsType & MapDispatchProfileContainerPropsType\r\n\r\nexport type ProfileContainerPropsType =\r\n    RouteComponentProps<PathParamsType> & ProfileContainerConnectPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateProfileContainerPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatusProfile,\r\n        updateStatusProfile,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)"],"names":["_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","props","useState","mode","setMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusProfile","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","Field","component","Input","name","placeholder","validate","type","Textarea","contacts","Object","keys","map","key","css","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","editMode","setEditMode","Preloader","src","photos","large","userPhoto","target","files","initialValues","formData","then","alt","message","likeCounts","maxLength10","maxLengthCreator","AddNewPostFormRedux","required","postsElements","posts","p","id","values","addPost","newPostText","connect","state","profilePage","dispatch","text","addPostAC","MyPosts","ProfileContainer","userId","this","match","params","authUserId","history","getUserProfile","String","getStatusProfile","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}