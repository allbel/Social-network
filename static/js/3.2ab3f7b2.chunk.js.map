{"version":3,"file":"static/js/3.2ab3f7b2.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCmBjN,EAZmB,SAACA,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAApC,SAAiDJ,EAAMO,UCHnE,EAJgB,SAACP,GACb,OAAO,gBAAKG,UAAWC,EAAhB,SAA8BJ,EAAMQ,W,uCCKzCC,GAAcC,EAAAA,EAAAA,GAAiB,IAiB/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAfsC,SAACZ,GAC/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUX,KAAM,iBAAkBY,YAAa,qBAC1DC,SAAU,CAACC,EAAAA,EAAUZ,QAGhC,0BACI,4CAiChB,EAzBgB,SAACT,GAEb,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuBzB,GAAIyB,EAAEzB,GAAIK,KAAMoB,EAAEpB,MAAxBoB,EAAEzB,OAC5D0B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoB5B,GAAI4B,EAAE5B,GAAIM,QAASsB,EAAEtB,SAA3BsB,EAAE5B,OAM/D,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKoB,KAEL,iBAAKrB,UAAWC,EAAhB,WACI,yBAAMwB,KACN,SAACjB,EAAD,CAAqBG,SAXd,SAACiB,GAChB/B,EAAMgC,WAAWD,EAAOE,0B,6BCPhC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACb,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACa,GACxB,MAAO,CACHJ,WAAY,SAACxB,GACT4B,GAASC,EAAAA,EAAAA,GAAa7B,SAO9B8B,EAAAA,EAFJ,CAGEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Xzl9-\",\"dialogsItems\":\"Dialogs_dialogsItems__IFLVq\",\"dialog\":\"Dialogs_dialog__NVvHz\",\"active\":\"Dialogs_active__x4EvK\",\"messages\":\"Dialogs_messages__TdjrG\",\"message\":\"Dialogs_message__qrN7t\"};","import React from 'react';\r\nimport css from '../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\ntype DialogItemPropsType = DialogType\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={css.dialog}>\r\n            <NavLink to={path} activeClassName={css.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport css from '../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\ntype MessagePropsType = MessageType\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return <div className={css.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport css from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageFrom: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageText'} placeholder={'Enter your message'}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFromRedux = reduxForm<FormDataType>({form: \"dialogAddMessageFrom\"})(AddMessageFrom)\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    const addMessage = (values: FormDataType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={css.dialogs}>\r\n            <div className={css.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={css.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFromRedux onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageAС, DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateDialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchDialogsPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateDialogsPropsType & MapDispatchDialogsPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateDialogsPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchDialogsPropsType => {\r\n    return {\r\n        addMessage: (message: string) => {\r\n            dispatch(addMessageAС(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["props","path","id","className","css","to","activeClassName","name","message","maxLength50","maxLengthCreator","AddMessageFromRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","addMessage","newMessageText","compose","connect","dispatch","addMessageAС","withAuthRedirect","Dialogs"],"sourceRoot":""}